<?php

namespace $CLASS_NAMESPACE$;

use Foundry\Exceptions\APIException;
use Foundry\Requests\Response;
use Foundry\Services\Service as FoundryService;
use $FORM_NAMESPACE$ as Form;
use $MODEL_NAMESPACE$ as Model;
use Illuminate\Database\Eloquent\Model as BaseModel;

class $CLASS$ extends FoundryService
{

    /**
	 * {@inheritdoc}
	 */
	static function model($id): BaseModel
	{
		//TODO return resource model
	}

    /**
	 * Get resources
	 *
	 * @param \Closure $closure A closure which will be given the Builder as the first parameter
	 *
	 * @return Response
	 */
	static public function find(\Closure $closure = null): Response
	{
		$query = Model::query();

		//TODO add extra logic, e.g ordering, etc...
		if ($closure) {
			$closure($query);
		}

		//todo apply default limit using settings

		return Response::success($query->paginate(20));
	}

    /**
	 * Get the specified resource or all.
	 *
	 * @param $id
	 *
	 * @return Response
	 */
	static function get($id)
	{
		if ($id && $resource = static::model($id)) {
			return Response::success($resource);
		} else {
			return Response::error(__("Requested resource was not found"), 404);
		}
	}

    /**
     * Create or Update resource
     *
     * @param Form $form
     * @param $id
     * @return Response
     */
    static function upsert(Form $form, $id)
    {
        $model = new Model();

        if($id && !$model = Model::query()->where('id', $id)->first()){
            return Response::error(__("Requested resource was not found"), 404);
        }

        $response = $form->validate();

        if($response->isSuccess()) {
        	$inputs = $response->getData();
	        $model->fill($inputs);
	        //TODO add additional logic if required
        } else {
	        return $response;
        }

        if($model->save()){
        	//TODO add additional logic if required
            return Response::success($model);
        }else{
            return Response::error(__("Unable to save resource"), 500);
        }
    }


    /**
     * Delete the specified resource.

     * @param $id
     * @return Response
     * @throws \Exception
     */
    static public function destroy($id)
    {
        $model = Model::query()->where('id', $id)->first();

        if (!$model) {
            return Response::error(__("Requested model was not found"), 404);
        }

        //TODO implement custom logic if required

        if($model->delete()){
            return Response::success();
        }else{
            return Response::error(__("Unable to delete resource"), 500);
        }
    }
}
